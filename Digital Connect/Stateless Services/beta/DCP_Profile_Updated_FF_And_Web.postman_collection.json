{
	"info": {
		"_postman_id": "cce8687a-1277-44e4-aa67-06e2ca279451",
		"name": "DCP_Profile_Updated_FF_And_Web",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18079627",
		"_collection_link": "https://bold-space-252845.postman.co/workspace/DCP-Testing~32ce5372-ddfa-4b95-b31a-2c528cfb1d36/collection/18079627-cce8687a-1277-44e4-aa67-06e2ca279451?action=share&creator=18079627&source=collection_link"
	},
	"item": [
		{
			"name": "Profile : restful :B6  Existing API's",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"TSTS08@JB.COM\",\r\n    \"password\": \"TSTS32@JB.COM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dcmcLogin}}",
							"host": [
								"{{dcmcLogin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-sabre-conversation-id",
								"value": "B6-getprofilev5-details",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1686683584443!1894!537",
								"type": "text"
							},
							{
								"key": "x-sabre-airline",
								"value": "B6",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-sabre-session-id",
								"value": "T1RLAQJEPszfPTSdq1XB4Ij6XQnlnlBIgxA/3H1PMHhxGRjVirPysT3bAACAWjZcjxwzGNXxbY3/kUVVTepgMfyInY3ov7KfQR/m+sE1wCBzh5TJ6rE4f/+XYa3dtZ0gKM0/M4CZCy+Cbs9AvZHFEDuXSQ9VA9WJMeNtDfvNgOpVQK1hlmbiYkl4M4iQoP4oevBlpsI5t7EPRqx5luZRs1tM54s0+guBFjH81+A*",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"singleSignOnToken\": \"T1RLAQGyX6frB1PNmJfGTuqPGqbt4hRiwhDLMslBLcLO/yOUgfeTTnZWAACQxOKCnNkH+/Po99BQjqHb5Devk/ogRMoZeMLCjzgDkmoLtl0KSBBkxKCtpLR3p7bpOKhww/2QrBTASV6DIcDkPm26bt2nuY+MkRZJeB2Tuk7INX9c3tNs4OzzsY/aIC2hHqMeWtTB7+fW9EHZajzbr81vv04PQUQBpFoiSJO7U8jX1tjPIImRpDeQ1dDO5bEc\",\r\n\r\n    \"airlineCode\": \"B6\",\r\n\r\n    \"clientCode\": \"AS\",\r\n\r\n    \"clientContextCode\": \"SSW\",\r\n\r\n    \"profileTypeCode\": \"TVL\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dcmc45-pf.as.dev.ascint.sabrecirrus.com/api/profile/details",
							"protocol": "http",
							"host": [
								"dcmc45-pf",
								"as",
								"dev",
								"ascint",
								"sabrecirrus",
								"com"
							],
							"path": [
								"api",
								"profile",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "BT : Balance",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-sabre-conversation-id",
								"value": "test1234",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1686682226966!6357!553!1!E2E-1",
								"type": "text"
							},
							{
								"key": "x-sabre-session-id",
								"value": "T1RLAQJEPszfPTSdq1XB4Ij6XQnlnlBIgxA/3H1PMHhxGRjVirPysT3bAACAWjZcjxwzGNXxbY3/kUVVTepgMfyInY3ov7KfQR/m+sE1wCBzh5TJ6rE4f/+XYa3dtZ0gKM0/M4CZCy+Cbs9AvZHFEDuXSQ9VA9WJMeNtDfvNgOpVQK1hlmbiYkl4M4iQoP4oevBlpsI5t7EPRqx5luZRs1tM54s0+guBFjH81+A*",
								"type": "text"
							},
							{
								"key": "x-sabre-airline",
								"value": "B6",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"firstName\": \"Fran\",\r\n\r\n    \"lastName\": \"Franklin\",\r\n\r\n    \"currencyCode\": \"USD\",\r\n\r\n    \"profileTypeCode\": \"TVL\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/profile//travelBankBalance",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"profile",
								"",
								"travelBankBalance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile : restful :VA Existing API's",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"userId\": \"1133150781\",\r\n\r\n    \"password\": \"test127\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dcrouter45.as.dev.ascint.sabrecirrus.com/e45/dc/profile/login?jipcc=VADX",
							"protocol": "http",
							"host": [
								"dcrouter45",
								"as",
								"dev",
								"ascint",
								"sabrecirrus",
								"com"
							],
							"path": [
								"e45",
								"dc",
								"profile",
								"login"
							],
							"query": [
								{
									"key": "jipcc",
									"value": "VADX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-sabre-conversation-id",
								"value": "va-getprofilev5-details",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1686683213398!391!541!1!E2E-1",
								"type": "text"
							},
							{
								"key": "x-sabre-airline",
								"value": "B6",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-sabre-session-id",
								"value": "T1RLAQJEPszfPTSdq1XB4Ij6XQnlnlBIgxA/3H1PMHhxGRjVirPysT3bAACAWjZcjxwzGNXxbY3/kUVVTepgMfyInY3ov7KfQR/m+sE1wCBzh5TJ6rE4f/+XYa3dtZ0gKM0/M4CZCy+Cbs9AvZHFEDuXSQ9VA9WJMeNtDfvNgOpVQK1hlmbiYkl4M4iQoP4oevBlpsI5t7EPRqx5luZRs1tM54s0+guBFjH81+A*",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"singleSignOnToken\": \"T1RLAQJMa4HJ0DRjQiHYPre+F9d/5DUltBCZborlc47QQo0QdX37qtoNAACQbxoLw3tYI5+MeGrQLeamgZsCkt9etWIJ3zmTBWgffyoevU5IKfmwuXnk7d4SWv//yuy2Vl+iCb6rYin2lyRIQKp90f2B7qkjKy453ykz/aZl4JS1pkxYLiDcJPVCayuR5/GbNuokCWLGYO42/4KlTAzB3Dl/eHub2E7Ya100cH2A/4cYBcMzxPc8lzy8ZjXp\",\r\n\r\n    \"airlineCode\": \"VA\",\r\n\r\n    \"clientCode\": \"AS\",\r\n\r\n    \"clientContextCode\": \"SSW\",\r\n\r\n    \"profileTypeCode\": \"TVL\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/profile/details",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"profile",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "BT : Balance",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-sabre-conversation-id",
								"value": "test1234",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1686683213398!391!541!1!E2E-1",
								"type": "text"
							},
							{
								"key": "x-sabre-session-id",
								"value": "T1RLAQJEPszfPTSdq1XB4Ij6XQnlnlBIgxA/3H1PMHhxGRjVirPysT3bAACAWjZcjxwzGNXxbY3/kUVVTepgMfyInY3ov7KfQR/m+sE1wCBzh5TJ6rE4f/+XYa3dtZ0gKM0/M4CZCy+Cbs9AvZHFEDuXSQ9VA9WJMeNtDfvNgOpVQK1hlmbiYkl4M4iQoP4oevBlpsI5t7EPRqx5luZRs1tM54s0+guBFjH81+A*",
								"type": "text"
							},
							{
								"key": "x-sabre-airline",
								"value": "VA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"firstName\": \"DEEPIKA\",\r\n\r\n    \"lastName\": \"SINGH\",\r\n\r\n    \"currencyCode\": \"AUD\",\r\n\r\n    \"profileTypeCode\": \"TVL\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/profile//travelBankBalance",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"profile",
								"",
								"travelBankBalance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile : rpc",
			"item": [
				{
					"name": "Web  link BT",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "New User Login _ B6DCSSO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"\r",
													"       //Login with the new USER account      \r",
													"        const headersToken = pm.response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"NewUserb6dcsso\",b6dcsso[1]);  \r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"\r",
													"console.log(\"NewUserb6dcsso\",pm.environment.get(\"NewUserb6dcsso\"));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('loginDetails', JSON.stringify(loginDetails));\r",
													"\r",
													"\r",
													"pm.variables.set('loginDetails', JSON.stringify(loginDetail));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
												"type": "default"
											},
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{loginDetails}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dcmcLogin}}",
											"host": [
												"{{dcmcLogin}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Link BT Profile : with_SSO Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"console.log(response.userId+\" \"+WebProfileResponse.userId)\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"const b6dcsso = pm.environment.get(\"NewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body ={\r",
													"    \"singleSignOnToken\": b6dcsso,\r",
													"    \"profileType\": \"Web\"\r",
													"}\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Link BT Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"loginDetails\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"let body = {\r",
													"    \"profileType\": \"Web\",\r",
													"    \"userName\": loginesponse?.userName,\r",
													"    \"password\": loginesponse?.password\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.variables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "Create  : Web Profile for Link BT A/C_withSSOToken_Step1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const webProfileLinkRequestId = \"WebprofileBTLinkCon\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"webProfileLinkRequestId\", webProfileLinkRequestId);\r",
													"const firstName = \"firstNameV\"+Math.floor((Math.random()*1000+1));\r",
													"const lastName = \"WebUserlastNameOf\"+firstName;\r",
													"const userName = lastName;\r",
													"let body =   {\r",
													"    \"title\": \"Mr\",\r",
													"    \"givenName\": firstName,\r",
													"    \"middleName\": \"K\",\r",
													"    \"surname\":lastName,\r",
													"    \"suffix\": \"Sr\",\r",
													"    \"dateOfBirth\": \"1990-05-20\",\r",
													"    \"gender\": \"Female\",\r",
													"    \"userName\":userName,\r",
													"    \"emails\": [\r",
													"        {\r",
													"            \"address\": \"ashishsabre@sabre.com\",\r",
													"            \"label\": \"Business\"\r",
													"        }\r",
													"    ],\r",
													"     \"phones\": [\r",
													"        {\r",
													"            \"label\": \"Mobile\",\r",
													"            \"number\": \"5554984\",\r",
													"        }\r",
													"    ],\r",
													"    \"addresses\": [\r",
													"        {\r",
													"            \"addressLine1\": \"apt 101\",\r",
													"            \"addressLine2\": \"spicetree\",\r",
													"            \"cityCode\": \"DFW\",\r",
													"            \"stateProvinceCode\": \"OH\",\r",
													"            \"postalCode\": \"12345\",\r",
													"            \"countryCode\": \"US\",\r",
													"            \"type\": \"Home\"\r",
													"        }\r",
													"    ],\r",
													"    \"loyaltyPrograms\": [\r",
													"        {\r",
													"            \"airlineCode\": \"X0\",\r",
													"            \"number\": \"987654321\",\r",
													"            \"tierLevel\": \"GLD\",\r",
													"            \"tierNumber\": 3,\r",
													"            \"receiverAirlineCode\": \"X0\",\r",
													"            \"accountBalance\": 2500,\r",
													"            \"numberOfCertificates\": 0\r",
													"        }\r",
													"    ],\r",
													"    \"homeCountryCode\": \"US\",\r",
													"    \"homeAirportCode\": \"LAS\",\r",
													"    \"preferredLanguageCode\": \"EN\",\r",
													"    \"profileType\": \"Web\",\r",
													"    \"password\":userName,\r",
													"    \"createTravelBankAccount\": false,\r",
													"    \"travelBankMarketCode\": \"AU\"\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"const newUserloginDetails = {\r",
													"     \"userName\": userName,\r",
													"    \"password\": userName,\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('newUserloginDetails', JSON.stringify(newUserloginDetails));\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"\r",
													"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
													"\r",
													"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
													"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
													"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
													"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is response has userId\",function(){\r",
													"    pm.expect(response?.userId).exist;\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
													" \r",
													"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
													"     console.log(loyaltyPrograms);\r",
													"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
													"     {\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
													"\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
													"                \r",
													"     }\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
													"     pm.expect(response?.travelBankDetails).not.exist;} );"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/create",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  : Link BT Profile New User Login _ B6DCSSO Token_Step2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"       //Login with the new USER account\r",
													"      \r",
													"        const headersToken = pm.response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"NewUserb6dcsso\",b6dcsso[1]);  \r",
													"\r",
													"                }\r",
													"            }\r",
													"        \r",
													"\r",
													"console.log(\"NewUserb6dcsso\",pm.environment.get(\"NewUserb6dcsso\"));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" \r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"\r",
													"let body = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"postman.setEnvironmentVariable('loginDetails', JSON.stringify(loginDetails));\r",
													"\r",
													"\r",
													"pm.variables.set('loginDetails', JSON.stringify(loginDetails));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
												"type": "default"
											},
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dcmcLogin}}",
											"host": [
												"{{dcmcLogin}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create : Link BT A/C_withSSOToken_Step3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"const BTLINKRESPONSE = pm.response.json();\r",
													"postman.setEnvironmentVariable('WebProfileLinkBTRS', JSON.stringify(loginDetails));\r",
													"postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
													"\r",
													"pm.test(\"Validate the BT accountNumber created and liked successfully\",function(){\r",
													"   pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
													"});\r",
													"\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"\r",
													" \r",
													"const webProfileLloginRQ = {\r",
													"  url: pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': 'WebProfileLinkBTRSId123',\r",
													"    'Authorization':'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" console.log(BTLINKRESPONSE?.accountNumber);\r",
													"pm.test(\"Validate the linked BT accountNumber retrived successfully after login\",function(){\r",
													"pm.sendRequest(webProfileLloginRQ, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const loginRespose=response.json();\r",
													" // console.log(loginRespose?.result?.user?.travelBankDetails?.accountNumber);\r",
													"    pm.expect(loginRespose?.result?.user?.travelBankDetails?.accountNumber).eqls(BTLINKRESPONSE?.accountNumber);\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													"//Initalize the B6DCSSO\r",
													"        const b6dcsso = pm.environment.get(\"NewUserb6dcsso\");\r",
													"        const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"        const LINKBTSSORQJSON = {\r",
													"            \"singleSignOnToken\": b6dcsso,\r",
													"            \"profileType\": \"Web\",\r",
													"            \"travelBankMarketCode\": \"US\"}\r",
													"        \r",
													" pm.variables.set('LINKBTSSORQJSON', JSON.stringify(LINKBTSSORQJSON));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "April-26-2023-ssotoken",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{LINKBTSSORQJSON}}"
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/createTravelBank",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"createTravelBank"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  : Web Profile link with BT using Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*997 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													" const firstName = \"firstNametest\"+Math.floor((Math.random()*106+1));\r",
													"const lastName = \"WebUserlastNameOf\"+firstName;\r",
													"const userName = lastName;\r",
													"let body = {\r",
													"    \"title\": \"Mr\",\r",
													"    \"givenName\": firstName,\r",
													"    \"middleName\": \"K\",\r",
													"    \"surname\":lastName,\r",
													"    \"suffix\": \"Sr\",\r",
													"    \"dateOfBirth\": \"1990-05-20\",\r",
													"    \"gender\": \"Female\",\r",
													"    \"userName\":userName,\r",
													"    \"emails\": [\r",
													"        {\r",
													"            \"address\": \"ashishsabre@sabre.com\",\r",
													"            \"label\": \"Business\"\r",
													"        }\r",
													"    ],\r",
													"     \"phones\": [\r",
													"        {\r",
													"            \"label\": \"Mobile\",\r",
													"            \"number\": \"5554984\",\r",
													"        }\r",
													"    ],\r",
													"    \"addresses\": [\r",
													"        {\r",
													"            \"addressLine1\": \"apt 101\",\r",
													"            \"addressLine2\": \"spicetree\",\r",
													"            \"cityCode\": \"DFW\",\r",
													"            \"stateProvinceCode\": \"OH\",\r",
													"            \"postalCode\": \"12345\",\r",
													"            \"countryCode\": \"US\",\r",
													"            \"type\": \"Home\"\r",
													"        }\r",
													"    ],\r",
													"    \"loyaltyPrograms\": [\r",
													"        {\r",
													"            \"airlineCode\": \"X0\",\r",
													"            \"number\": \"987654321\"\r",
													"        }\r",
													"    ],\r",
													"    \"homeCountryCode\": \"US\",\r",
													"    \"homeAirportCode\": \"LAS\",\r",
													"    \"preferredLanguageCode\": \"EN\",\r",
													"    \"profileType\": \"Web\",\r",
													"    \"password\":userName,\r",
													"   \r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"const newUserloginDetails = {\r",
													"     \"userId\": userName,\r",
													"    \"password\": \"0clAD\",\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('newUserloginDetails', JSON.stringify(newUserloginDetails));\r",
													"\r",
													"\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"\r",
													"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
													"\r",
													"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
													"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
													"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
													"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is response has userId\",function(){\r",
													"    pm.expect(response?.userId).exist;\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
													" \r",
													"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
													"     console.log(loyaltyPrograms);\r",
													"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
													"     {\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
													"\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
													"                \r",
													"     }\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
													"     pm.expect(response?.travelBankDetails).not.exist;} );\r",
													"\r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"const webProfileLinkRequestId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
													"\r",
													"const LINKBTRQJSON = {\r",
													"    \"userName\": loginDetails?.userId,\r",
													"    \"profileType\": \"Web\",\r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"\r",
													"const webProfileLinkRQ = {\r",
													"  url: pm.environment.get(\"endpoint\")+'/v1/dc/profiles/createTravelBank',\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': webProfileLinkRequestId,\r",
													"    'Authorization':'Bearer '+ pm.environment.get(\"token\")\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(LINKBTRQJSON)\r",
													"  }\r",
													"};\r",
													"\r",
													"let BTLINKRESPONSE = {};\r",
													"pm.test(\"Validate the profile linked successfully\", function () {\r",
													"    pm.sendRequest(webProfileLinkRQ, (error, response) => {\r",
													"      console.log(error ? error : response.json());\r",
													"        BTLINKRESPONSE = response.json();\r",
													"      pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
													"      postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
													"      });\r",
													" });\r",
													" \r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetails)\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.test(\"Validate the BT accountNumber created and liked successfully\",function(){\r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"  pm.expect(loginRespose?.result?.user?.travelBankDetails?.accountNumber).eqls(BTLINKRESPONSE?.accountNumber);\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/create",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  : Web Profile and Link BT A/C_withUserName_Pass Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"\r",
													"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
													"\r",
													"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
													"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
													"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
													"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is response has userId\",function(){\r",
													"    pm.expect(response?.userId).exist;\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
													" \r",
													"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
													"     console.log(loyaltyPrograms);\r",
													"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
													"     {\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
													"\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
													"                \r",
													"     }\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
													"     pm.expect(response?.travelBankDetails).not.exist;} );\r",
													"\r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"const webProfileLinkRequestId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
													"\r",
													"const LINKBTRQJSON = {\r",
													"    \"userName\": loginDetails?.userId,\r",
													"    \"profileType\": \"Web\",\r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"\r",
													"const webProfileLinkRQ = {\r",
													"  url: pm.environment.get(\"endpoint\")+'/v1/dc/profiles/createTravelBank',\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': webProfileLinkRequestId,\r",
													"    'Authorization':'Bearer '+ pm.environment.get(\"token\")\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(LINKBTRQJSON)\r",
													"  }\r",
													"};\r",
													"\r",
													"let BTLINKRESPONSE = {};\r",
													"pm.test(\"Validate the profile linked successfully\", function () {\r",
													"    pm.sendRequest(webProfileLinkRQ, (error, response) => {\r",
													"      console.log(error ? error : response.json());\r",
													"        BTLINKRESPONSE = response.json();\r",
													"      pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
													"      postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
													"      });\r",
													" });\r",
													" \r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetails)\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.test(\"Validate the BT accountNumber created and liked successfully\",function(){\r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"  pm.expect(loginRespose?.result?.user?.travelBankDetails?.accountNumber).eqls(BTLINKRESPONSE?.accountNumber);\r",
													"});\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*997 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													" const firstName = \"firstNametest\"+Math.floor((Math.random()*106+1));\r",
													"const lastName = \"WebUserlastNameOf\"+firstName;\r",
													"const userName = lastName;\r",
													"let body = {\r",
													"    \"title\": \"Mr\",\r",
													"    \"givenName\": firstName,\r",
													"    \"middleName\": \"K\",\r",
													"    \"surname\":lastName,\r",
													"    \"suffix\": \"Sr\",\r",
													"    \"dateOfBirth\": \"1990-05-20\",\r",
													"    \"gender\": \"Female\",\r",
													"    \"userName\":userName,\r",
													"    \"emails\": [\r",
													"        {\r",
													"            \"address\": \"ashishsabre@sabre.com\",\r",
													"            \"label\": \"Business\"\r",
													"        }\r",
													"    ],\r",
													"     \"phones\": [\r",
													"        {\r",
													"            \"label\": \"Mobile\",\r",
													"            \"number\": \"5554984\",\r",
													"        }\r",
													"    ],\r",
													"    \"addresses\": [\r",
													"        {\r",
													"            \"addressLine1\": \"apt 101\",\r",
													"            \"addressLine2\": \"spicetree\",\r",
													"            \"cityCode\": \"DFW\",\r",
													"            \"stateProvinceCode\": \"OH\",\r",
													"            \"postalCode\": \"12345\",\r",
													"            \"countryCode\": \"US\",\r",
													"            \"type\": \"Home\"\r",
													"        }\r",
													"    ],\r",
													"    \"loyaltyPrograms\": [\r",
													"        {\r",
													"            \"airlineCode\": \"X0\",\r",
													"            \"number\": \"987654321\"\r",
													"        }\r",
													"    ],\r",
													"    \"homeCountryCode\": \"US\",\r",
													"    \"homeAirportCode\": \"LAS\",\r",
													"    \"preferredLanguageCode\": \"EN\",\r",
													"    \"profileType\": \"Web\",\r",
													"    \"password\":userName,\r",
													"   \r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"const newUserloginDetails = {\r",
													"     \"userId\": userName,\r",
													"    \"password\": \"0clAD\",\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('newUserloginDetails', JSON.stringify(newUserloginDetails));\r",
													"\r",
													"\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/create",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Web profile",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "Get New  Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"newWebProfileUserloginDetails\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newWebProfileUserloginDetails\"));\r",
													" \r",
													"let loginDetail = {\r",
													"    \"profileType\": \"Web\",\r",
													"    \"userName\":  loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"    \r",
													"}\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(loginDetail));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"//const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).to.eql(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Profile : with_SSO Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"     pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newWebProfileUserloginDetails\"));\r",
													"//console.log(loginDetails);\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" \r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"   postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"    //Login with the new USER account      \r",
													"        const headersToken = response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"WebNewUserb6dcsso\",b6dcsso[1]);  \r",
													"                }\r",
													"            }});\r",
													" \r",
													"\r",
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"let b6dcsso = pm.environment.get(\"WebNewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body = {\r",
													"        \"singleSignOnToken\": b6dcsso,\r",
													"        \"profileType\": \"Web\"\r",
													"        }\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create  : Web Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"Webrandomname\"+Math.random().toString(36).substring(2,7);\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =  {\r",
											"    \"title\": \"Mr\",\r",
											"    \"givenName\": firstName,\r",
											"    \"middleName\": \"K\",\r",
											"    \"surname\":lastName,\r",
											"    \"suffix\": \"Sr\",\r",
											"    \"dateOfBirth\": \"1990-05-20\",\r",
											"    \"gender\": \"Female\",\r",
											"    \"userName\":userName,\r",
											"    \"emails\": [\r",
											"        {\r",
											"            \"address\": \"ashishsabre@sabre.com\",\r",
											"            \"label\": \"Business\"\r",
											"        }\r",
											"    ],\r",
											"    \"phones\": [\r",
											"        {\r",
											"            \"label\": \"Mobile\",\r",
											"            \"number\": \"5554984\",\r",
											"        }\r",
											"    ],\r",
											"    \"addresses\": [\r",
											"        {\r",
											"            \"addressLine1\": \"apt 101\",\r",
											"            \"addressLine2\": \"spicetree\",\r",
											"            \"city\": \"Dallas\",\r",
											"            \"stateProvinceCode\": \"OH\",\r",
											"            \"postalCode\": \"12345\",\r",
											"            \"countryCode\": \"US\",\r",
											"            \"type\": \"Home\"\r",
											"        }\r",
											"    ],\r",
											"    \"loyaltyPrograms\": [\r",
											"        {\r",
											"            \"airlineCode\": \"X0\",\r",
											"            \"number\": \"*\"\r",
											"        }\r",
											"    ],\r",
											"    \"homeCountryCode\": \"US\",\r",
											"    \"homeAirportCode\": \"LAS\",\r",
											"    \"preferredLanguageCode\": \"EN\",\r",
											"    \"profileType\": \"Web\",\r",
											"    \"password\": \"userName123\",\r",
											"    \"createTravelBankAccount\": false,\r",
											"    \"travelBankMarketCode\": \"US\"\r",
											"}\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"\r",
											"const newUserloginDetails = {\r",
											"     \"userName\": userName,\r",
											"    \"password\": \"userName123\"\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable('newWebProfileUserloginDetails', JSON.stringify(newUserloginDetails));\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
											"\r",
											"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
											"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
											"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
											"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
											"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
											"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
											"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
											"    pm.expect(response?.profileType).eqls(requestBody?.profileType);\r",
											"\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is response has userId\",function(){\r",
											"    pm.expect(response?.userId).exist;\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
											" \r",
											"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
											"     console.log(loyaltyPrograms);\r",
											"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
											"     {\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
											"\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
											"                \r",
											"     }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
											"     pm.expect(response?.travelBankDetails).not.exist;} );"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "profileRequestIdLingoUpdate123",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "WEB + BT Profile",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "Get WEB PLUS BT New  Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"newWebPlusBTUserlogin\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"const body = {\r",
													"    \"profileType\": \"Web\",\r",
													"    \"userName\": loginesponse?.userName,\r",
													"    \"password\": loginesponse?.password\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.variables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebPlusBTProfileRS\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"     pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WEB PLUS BT New Profile : with_SSO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebPlusBTProfileRS = JSON.parse(pm.environment.get(\"WebPlusBTProfileRS\"));\r",
													"\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebPlusBTProfileRS?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebPlusBTProfileRS?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebPlusBTProfileRS?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebPlusBTProfileRS?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebPlusBTProfileRS?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebPlusBTProfileRS?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebPlusBTProfileRS?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebPlusBTProfileRS?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebPlusBTProfileRS?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebPlusBTProfileRS?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebPlusBTProfileRS?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebPlusBTProfileRS?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebPlusBTProfileRS?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebPlusBTProfileRS?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebPlusBTProfileRS?.userName);\r",
													"}\r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(WebPlusBTProfileRS?.travelBankDetails?.accountNumber);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newWebPlusBTUserlogin\"));\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" \r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"   postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"    //Login with the new USER account      \r",
													"        const headersToken = response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"WebNewUserb6dcsso\",b6dcsso[1]);  \r",
													"                }\r",
													"            }});\r",
													" \r",
													"\r",
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"const b6dcsso = pm.environment.get(\"WebNewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body = {\r",
													"        \"singleSignOnToken\": b6dcsso,\r",
													"        \"profileType\": \"Web\"\r",
													"        }\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create  : Web plus BT Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstNametest\"+Math.floor((Math.random()*106+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body = {\r",
											"    \"title\": \"Mr\",\r",
											"    \"givenName\": firstName,\r",
											"    \"middleName\": \"K\",\r",
											"    \"surname\":lastName,\r",
											"    \"suffix\": \"Sr\",\r",
											"    \"dateOfBirth\": \"1990-05-20\",\r",
											"    \"gender\": \"Female\",\r",
											"    \"userName\":userName,\r",
											"    \"emails\": [\r",
											"        {\r",
											"            \"address\": \"ashishsabre@sabre.com\",\r",
											"            \"label\": \"Business\"\r",
											"        }\r",
											"    ],\r",
											"     \"phones\": [\r",
											"        {\r",
											"            \"label\": \"Mobile\",\r",
											"            \"number\": \"5554984\",\r",
											"        }\r",
											"    ],\r",
											"    \"addresses\": [\r",
											"        {\r",
											"            \"addressLine1\": \"apt 101\",\r",
											"            \"addressLine2\": \"spicetree\",\r",
											"            \"cityCode\": \"DFW\",\r",
											"            \"stateProvinceCode\": \"OH\",\r",
											"            \"postalCode\": \"12345\",\r",
											"            \"countryCode\": \"US\",\r",
											"            \"type\": \"Home\"\r",
											"        }\r",
											"    ],\r",
											"    \"loyaltyPrograms\": [\r",
											"        {\r",
											"            \"airlineCode\": \"X0\",\r",
											"            \"number\": \"987654321\",\r",
											"            \"tierLevel\": \"GLD\",\r",
											"            \"tierNumber\": 3,\r",
											"            \"receiverAirlineCode\": \"X0\",\r",
											"            \"accountBalance\": 2500,\r",
											"            \"numberOfCertificates\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"homeCountryCode\": \"US\",\r",
											"    \"homeAirportCode\": \"LAS\",\r",
											"    \"preferredLanguageCode\": \"EN\",\r",
											"    \"profileType\": \"Web\",\r",
											"    \"password\":userName,\r",
											"    \"createTravelBankAccount\": true,\r",
											"    \"travelBankMarketCode\": \"US\"\r",
											"}\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"\r",
											"const newUserloginDetails = {\r",
											"     \"userName\": userName,\r",
											"    \"password\": userName,\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable('newWebPlusBTUserlogin', JSON.stringify(newUserloginDetails));\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable('WebPlusBTProfileRS', JSON.stringify(response));\r",
											"postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(response.travelBankDetails));\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
											"    pm.expect(response?.firstName).eqls(requestBody?.firstName);\r",
											"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
											"    pm.expect(response?.lastName).eqls(requestBody?.lastName);\r",
											"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
											"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
											"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is response has userId\",function(){\r",
											"    pm.expect(response?.userId).exist;\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
											" \r",
											"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
											"     console.log(loyaltyPrograms);\r",
											"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
											"     {\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
											"\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
											"                \r",
											"     }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Validate travelBankDetails are present\",function(){\r",
											"     pm.expect(response?.travelBankDetails).exist;\r",
											"     const travelBankDetails  = response?.travelBankDetails;\r",
											"     pm.expect(travelBankDetails?.accountNumber).exist;\r",
											"     pm.expect(travelBankDetails?.balance).exist;\r",
											"     pm.expect(travelBankDetails?.subBalances).exist;   \r",
											"} );\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FrequentFlyer Web profile",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "Get New  Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"newFFProUserloginDetails\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newFFProUserloginDetails\"));\r",
													"const body = {\r",
													"    \"profileType\": \"FrequentFlyer\",\r",
													"    \"userName\":  loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													" \r",
													"pm.variables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"//const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).to.eql(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Profile : with_SSO Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													" \r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"     pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newFFProUserloginDetails\"));\r",
													"//console.log(loginDetails);\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" \r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"   postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"    //Login with the new USER account      \r",
													"        const headersToken = response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"WebNewUserb6dcsso\",b6dcsso[1]);  \r",
													"                }\r",
													"            }});\r",
													" \r",
													"\r",
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"let b6dcsso = pm.environment.get(\"WebNewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body = {\r",
													"        \"singleSignOnToken\": b6dcsso,\r",
													"        \"profileType\": \"FrequentFlyer\"\r",
													"        }\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create  : Web Profile  FrequrntFlyer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const profileRequestFFId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
											"pm.globals.set(\"profileRequestFFId\", profileRequestFFId);\r",
											" // program to generate random strings\r",
											"// declare all characters\r",
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"const firstName = \"FFgivenname\"+generateString(3);\r",
											"const lastName =  \"FFln\"+generateString(5);\r",
											"const userName = lastName;\r",
											"let body =  {\r",
											"    \"title\": \"Mr\",\r",
											"    \"givenName\": firstName,\r",
											"    \"middleName\": \"K\",\r",
											"    \"surname\":lastName,\r",
											"    \"suffix\": \"Sr\",\r",
											"    \"dateOfBirth\": \"1990-05-20\",\r",
											"    \"gender\": \"Female\",\r",
											"    \"userName\":userName,\r",
											"    \"emails\": [\r",
											"        {\r",
											"            \"address\": \"ashishsabre@sabre.com\",\r",
											"            \"label\": \"Business\"\r",
											"        }\r",
											"    ],\r",
											"    \"phones\": [\r",
											"        {\r",
											"            \"label\": \"Mobile\",\r",
											"            \"number\": \"5554984\",\r",
											"        }\r",
											"    ],\r",
											"    \"addresses\": [\r",
											"        {\r",
											"            \"addressLine1\": \"apt 101\",\r",
											"            \"addressLine2\": \"spicetree\",\r",
											"            \"city\": \"Dallas\",\r",
											"            \"stateProvinceCode\": \"OH\",\r",
											"            \"postalCode\": \"12345\",\r",
											"            \"countryCode\": \"US\",\r",
											"            \"type\": \"Home\"\r",
											"        }\r",
											"    ],\r",
											"    \"loyaltyPrograms\": [\r",
											"        {\r",
											"            \"airlineCode\": \"B6\",\r",
											"            \"number\": \"*\"\r",
											"        }\r",
											"    ],\r",
											"    \"homeCountryCode\": \"US\",\r",
											"    \"homeAirportCode\": \"LAS\",\r",
											"    \"preferredLanguageCode\": \"EN\",\r",
											"    \"profileType\": \"FrequentFlyer\",\r",
											"    \"password\": \"userName123\",\r",
											"    \"createTravelBankAccount\": false,\r",
											"    \"travelBankMarketCode\": \"AU\"\r",
											"}\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"const newUserloginDetails = {\r",
											"     \"userName\": lastName,\r",
											"     \"password\": \"userName123\"\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable('newFFProUserloginDetails', JSON.stringify(newUserloginDetails));\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
											"\r",
											"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
											"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
											"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
											"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
											"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
											"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
											"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is response has userId\",function(){\r",
											"    pm.expect(response?.userId).exist;\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
											" //Should wite the validation once we have balance and user able to provide the loyal number. \r",
											"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
											"     console.log(loyaltyPrograms);\r",
											"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
											"     {\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
											"   \r",
											"                \r",
											"     }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
											"     pm.expect(response?.travelBankDetails).not.exist;} );"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestFFId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FrequentFlyer WEB + BT Profile",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "Get WEB PLUS BT New  Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"newWebPlusBTUserlogin\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"const body = {\r",
													"    \"profileType\": \"Web\",\r",
													"    \"userName\": loginesponse?.userName,\r",
													"    \"password\": loginesponse?.password\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.variables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebPlusBTProfileRS\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"     pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WEB PLUS BT New Profile : with_SSO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebPlusBTProfileRS = JSON.parse(pm.environment.get(\"WebPlusBTProfileRS\"));\r",
													"\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebPlusBTProfileRS?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebPlusBTProfileRS?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebPlusBTProfileRS?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebPlusBTProfileRS?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebPlusBTProfileRS?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebPlusBTProfileRS?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebPlusBTProfileRS?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebPlusBTProfileRS?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebPlusBTProfileRS?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebPlusBTProfileRS?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebPlusBTProfileRS?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebPlusBTProfileRS?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebPlusBTProfileRS?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebPlusBTProfileRS?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebPlusBTProfileRS?.userName);\r",
													"}\r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(WebPlusBTProfileRS?.travelBankDetails?.accountNumber);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newWebPlusBTUserlogin\"));\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" \r",
													"pm.sendRequest(postRequestLogin, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  loginRespose = response.json();\r",
													"   postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"    //Login with the new USER account      \r",
													"        const headersToken = response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"WebNewUserb6dcsso\",b6dcsso[1]);  \r",
													"                }\r",
													"            }});\r",
													" \r",
													"\r",
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"const b6dcsso = pm.environment.get(\"WebNewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body = {\r",
													"        \"singleSignOnToken\": b6dcsso,\r",
													"        \"profileType\": \"Web\"\r",
													"        }\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create  : Web plus BT Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const profileRequestFFId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
											"pm.globals.set(\"profileRequestFFId\", profileRequestFFId);\r",
											" // program to generate random strings\r",
											"// declare all characters\r",
											"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"function generateString(length) {\r",
											"    let result = ' ';\r",
											"    const charactersLength = characters.length;\r",
											"    for ( let i = 0; i < length; i++ ) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"\r",
											"    return result;\r",
											"}\r",
											"const firstName = \"FFgivenname\"+generateString(3);\r",
											"const lastName =  \"FFln\"+generateString(5);\r",
											"const userName = lastName;\r",
											"let body =  {\r",
											"    \"title\": \"Mr\",\r",
											"    \"givenName\": firstName,\r",
											"    \"middleName\": \"K\",\r",
											"    \"surname\":lastName,\r",
											"    \"suffix\": \"Sr\",\r",
											"    \"dateOfBirth\": \"1990-05-20\",\r",
											"    \"gender\": \"Female\",\r",
											"    \"userName\":userName,\r",
											"    \"emails\": [\r",
											"        {\r",
											"            \"address\": \"ashishsabre@sabre.com\",\r",
											"            \"label\": \"Business\"\r",
											"        }\r",
											"    ],\r",
											"    \"phones\": [\r",
											"        {\r",
											"            \"label\": \"Mobile\",\r",
											"            \"number\": \"5554984\",\r",
											"        }\r",
											"    ],\r",
											"    \"addresses\": [\r",
											"        {\r",
											"            \"addressLine1\": \"apt 101\",\r",
											"            \"addressLine2\": \"spicetree\",\r",
											"            \"city\": \"Dallas\",\r",
											"            \"stateProvinceCode\": \"OH\",\r",
											"            \"postalCode\": \"12345\",\r",
											"            \"countryCode\": \"US\",\r",
											"            \"type\": \"Home\"\r",
											"        }\r",
											"    ],\r",
											"    \"loyaltyPrograms\": [\r",
											"        {\r",
											"            \"airlineCode\": \"B6\",\r",
											"            \"number\": \"*\"\r",
											"        }\r",
											"    ],\r",
											"    \"homeCountryCode\": \"US\",\r",
											"    \"homeAirportCode\": \"LAS\",\r",
											"    \"preferredLanguageCode\": \"EN\",\r",
											"    \"profileType\": \"FrequentFlyer\",\r",
											"    \"password\": \"userName123\",\r",
											"    \"createTravelBankAccount\": true,\r",
											"    \"travelBankMarketCode\": \"US\"\r",
											"}\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"const newUserloginDetails = {\r",
											"     \"userName\": lastName,\r",
											"     \"password\": \"userName123\"\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable('newFFProUserloginDetails', JSON.stringify(newUserloginDetails));\r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"\r",
											"postman.setEnvironmentVariable('WebPlusBTProfileRS', JSON.stringify(response));\r",
											"postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(response.travelBankDetails));\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
											"    pm.expect(response?.firstName).eqls(requestBody?.firstName);\r",
											"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
											"    pm.expect(response?.lastName).eqls(requestBody?.lastName);\r",
											"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
											"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
											"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is response has userId\",function(){\r",
											"    pm.expect(response?.userId).exist;\r",
											"});\r",
											"\r",
											" \r",
											"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
											" \r",
											"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
											"     console.log(loyaltyPrograms);\r",
											"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
											"     {\r",
											"           pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
											"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
											"                \r",
											"     }\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Validate travelBankDetails are present\",function(){\r",
											"     pm.expect(response?.travelBankDetails).exist;\r",
											"     const travelBankDetails  = response?.travelBankDetails;\r",
											"     pm.expect(travelBankDetails?.accountNumber).exist;\r",
											"     pm.expect(travelBankDetails?.balance).exist;\r",
											"     pm.expect(travelBankDetails?.subBalances).exist;   \r",
											"} );\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestFFId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "FrequentFlyer Web  link BT",
					"item": [
						{
							"name": "Retrieve Profile",
							"item": [
								{
									"name": "New User Login _ B6DCSSO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"postman.setEnvironmentVariable(\"SSOUserloginResponse\",JSON.stringify(response));  \r",
													"\r",
													"       //Login with the new USER account      \r",
													"        const headersToken = pm.response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"NewUserb6dcsso\",b6dcsso[1]);  \r",
													"\r",
													"                }\r",
													"            }\r",
													"\r",
													"\r",
													"console.log(\"NewUserb6dcsso\",pm.environment.get(\"NewUserb6dcsso\"));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('loginDetails', JSON.stringify(loginDetails));\r",
													"\r",
													"\r",
													"pm.variables.set('loginDetails', JSON.stringify(loginDetail));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
												"type": "default"
											},
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{loginDetails}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dcmcLogin}}",
											"host": [
												"{{dcmcLogin}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Link BT Profile : with_SSO Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"console.log(response.userId+\" \"+WebProfileResponse.userId)\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
													"const b6dcsso = pm.environment.get(\"NewUserb6dcsso\");\r",
													"console.log('token',b6dcsso);\r",
													"const body ={\r",
													"    \"singleSignOnToken\": b6dcsso,\r",
													"    \"profileType\": \"Web\"\r",
													"}\r",
													"\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Link BT Profile: with_UserId_Pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const loginesponse = JSON.parse(pm.environment.get(\"loginDetails\"));\r",
													"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
													"let body = {\r",
													"    \"profileType\": \"Web\",\r",
													"    \"userName\": loginesponse?.userName,\r",
													"    \"password\": loginesponse?.password\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.variables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"const WebProfileResponse = JSON.parse(pm.environment.get(\"WebProfileResponseData\"));\r",
													"const linkBTRS = JSON.parse(pm.environment.get('LinkBTWithUserIDRS'));\r",
													"\r",
													"pm.test(\"Validate is the Profile retrived successfully and matching with create profile response\",function(){\r",
													"    pm.expect(response?.givenName).eqls(WebProfileResponse?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(WebProfileResponse?.middleName);\r",
													"    pm.expect(response?.surname).eqls(WebProfileResponse?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(WebProfileResponse?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(WebProfileResponse?.gender);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"    pm.expect(response?.emails).eqls(WebProfileResponse?.emails);\r",
													"    pm.expect(response?.phones).eqls(WebProfileResponse?.phones);\r",
													"    pm.expect(response?.addresses).eqls(WebProfileResponse?.addresses);\r",
													"    pm.expect(response?.loyaltyPrograms).eqls(WebProfileResponse?.loyaltyPrograms);\r",
													"    pm.expect(response?.homeCountryCode).eqls(WebProfileResponse?.homeCountryCode);\r",
													"    pm.expect(response?.homeAirportCode).eqls(WebProfileResponse?.homeAirportCode);\r",
													"}); \r",
													"\r",
													"pm.test(\"Validate liked accountNumber exist\",function(){\r",
													"    pm.expect(response?.travelBankDetails?.accountNumber).eqls(linkBTRS?.accountNumber);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate profileType is as create profile response\")\r",
													"{\r",
													"    pm.expect(response?.profileType).eqls(WebProfileResponse?.profileType);\r",
													"}\r",
													" \r",
													"\r",
													"\r",
													"pm.test(\"Validate user ID  and User Name are same as create profile\")\r",
													"{\r",
													"    pm.expect(response?.userId).eqls(WebProfileResponse?.userId);\r",
													"    pm.expect(response?.userName).eqls(WebProfileResponse?.userName);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{profileReadRequestId}}",
												"type": "text"
											},
											{
												"key": "x-sabre-security-token",
												"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}"
										},
										"url": {
											"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
											"host": [
												"{{endpoint}}{{contextpath}}{{Retrieve}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "Create  : Web Profile for Link BT A/C_withSSOToken_Step1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const webProfileLinkRequestId = \"WebprofileBTLinkCon\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"webProfileLinkRequestId\", webProfileLinkRequestId);\r",
													"const firstName = \"firstNameV\"+Math.floor((Math.random()*1000+1));\r",
													"const lastName = \"WebUserlastNameOf\"+firstName;\r",
													"const userName = lastName;\r",
													"let body =   {\r",
													"    \"title\": \"Mr\",\r",
													"    \"givenName\": firstName,\r",
													"    \"middleName\": \"K\",\r",
													"    \"surname\":lastName,\r",
													"    \"suffix\": \"Sr\",\r",
													"    \"dateOfBirth\": \"1990-05-20\",\r",
													"    \"gender\": \"Female\",\r",
													"    \"userName\":userName,\r",
													"    \"emails\": [\r",
													"        {\r",
													"            \"address\": \"ashishsabre@sabre.com\",\r",
													"            \"label\": \"Business\"\r",
													"        }\r",
													"    ],\r",
													"     \"phones\": [\r",
													"        {\r",
													"            \"label\": \"Mobile\",\r",
													"            \"number\": \"5554984\",\r",
													"        }\r",
													"    ],\r",
													"    \"addresses\": [\r",
													"        {\r",
													"            \"addressLine1\": \"apt 101\",\r",
													"            \"addressLine2\": \"spicetree\",\r",
													"            \"cityCode\": \"DFW\",\r",
													"            \"stateProvinceCode\": \"OH\",\r",
													"            \"postalCode\": \"12345\",\r",
													"            \"countryCode\": \"US\",\r",
													"            \"type\": \"Home\"\r",
													"        }\r",
													"    ],\r",
													"    \"loyaltyPrograms\": [\r",
													"        {\r",
													"            \"airlineCode\": \"X0\",\r",
													"            \"number\": \"987654321\",\r",
													"            \"tierLevel\": \"GLD\",\r",
													"            \"tierNumber\": 3,\r",
													"            \"receiverAirlineCode\": \"X0\",\r",
													"            \"accountBalance\": 2500,\r",
													"            \"numberOfCertificates\": 0\r",
													"        }\r",
													"    ],\r",
													"    \"homeCountryCode\": \"US\",\r",
													"    \"homeAirportCode\": \"LAS\",\r",
													"    \"preferredLanguageCode\": \"EN\",\r",
													"    \"profileType\": \"Web\",\r",
													"    \"password\":userName,\r",
													"    \"createTravelBankAccount\": false,\r",
													"    \"travelBankMarketCode\": \"AU\"\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"const newUserloginDetails = {\r",
													"     \"userName\": userName,\r",
													"    \"password\": userName,\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('newUserloginDetails', JSON.stringify(newUserloginDetails));\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													" \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"\r",
													"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
													"\r",
													"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
													"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
													"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
													"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is response has userId\",function(){\r",
													"    pm.expect(response?.userId).exist;\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
													" \r",
													"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
													"     console.log(loyaltyPrograms);\r",
													"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
													"     {\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.number).eqls(requestBody?.loyaltyPrograms[i]?.number);\r",
													"\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.tierNumber).exist;\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.accountBalance).exist;\r",
													"                \r",
													"     }\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
													"     pm.expect(response?.travelBankDetails).not.exist;} );"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/create",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  : Link BT Profile New User Login _ B6DCSSO Token_Step2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"       //Login with the new USER account\r",
													"      \r",
													"        const headersToken = pm.response.headers.filter(h => h.key==\"Set-Cookie\");\r",
													"            for(let i = 0;i<headersToken.length;i++)\r",
													"            {\r",
													"                if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
													"                {\r",
													"                    let headerlist = headersToken[i]?.value.split(\" \");\r",
													"                    let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
													"                    console.log(\"b6dcsso\",b6dcsso[1]);\r",
													"                    postman.setEnvironmentVariable(\"NewUserb6dcsso\",b6dcsso[1]);  \r",
													"\r",
													"                }\r",
													"            }\r",
													"        \r",
													"\r",
													"console.log(\"NewUserb6dcsso\",pm.environment.get(\"NewUserb6dcsso\"));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" \r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"\r",
													"let body = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"postman.setEnvironmentVariable('loginDetails', JSON.stringify(loginDetails));\r",
													"\r",
													"\r",
													"pm.variables.set('loginDetails', JSON.stringify(loginDetails));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
												"type": "default"
											},
											{
												"key": "X-Request-ID",
												"value": "{{webProfileLinkRequestId}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{dcmcLogin}}",
											"host": [
												"{{dcmcLogin}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create : Link BT A/C_withSSOToken_Step3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"const BTLINKRESPONSE = pm.response.json();\r",
													"postman.setEnvironmentVariable('WebProfileLinkBTRS', JSON.stringify(loginDetails));\r",
													"postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
													"\r",
													"pm.test(\"Validate the BT accountNumber created and liked successfully\",function(){\r",
													"   pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
													"});\r",
													"\r",
													"let loginDetail = {\r",
													"     \"userId\": loginDetails.userName,\r",
													"    \"password\": loginDetails.password\r",
													"}\r",
													"\r",
													" \r",
													"const webProfileLloginRQ = {\r",
													"  url: pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': 'WebProfileLinkBTRSId123',\r",
													"    'Authorization':'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(loginDetail)\r",
													"  }\r",
													"};\r",
													" console.log(BTLINKRESPONSE?.accountNumber);\r",
													"pm.test(\"Validate the linked BT accountNumber retrived successfully after login\",function(){\r",
													"pm.sendRequest(webProfileLloginRQ, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const loginRespose=response.json();\r",
													" // console.log(loginRespose?.result?.user?.travelBankDetails?.accountNumber);\r",
													"    pm.expect(loginRespose?.result?.user?.travelBankDetails?.accountNumber).eqls(BTLINKRESPONSE?.accountNumber);\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													"//Initalize the B6DCSSO\r",
													"        const b6dcsso = pm.environment.get(\"NewUserb6dcsso\");\r",
													"        const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
													"        const LINKBTSSORQJSON = {\r",
													"            \"singleSignOnToken\": b6dcsso,\r",
													"            \"profileType\": \"Web\",\r",
													"            \"travelBankMarketCode\": \"US\"}\r",
													"        \r",
													" pm.variables.set('LINKBTSSORQJSON', JSON.stringify(LINKBTSSORQJSON));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "April-26-2023-ssotoken",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{LINKBTSSORQJSON}}"
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/createTravelBank",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"createTravelBank"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  : Web Profile link with BT using Username",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													" const profileRequestFFId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
													"pm.globals.set(\"profileRequestFFId\", profileRequestFFId);\r",
													" // program to generate random strings\r",
													"// declare all characters\r",
													"const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
													"\r",
													"function generateString(length) {\r",
													"    let result = ' ';\r",
													"    const charactersLength = characters.length;\r",
													"    for ( let i = 0; i < length; i++ ) {\r",
													"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
													"    }\r",
													"\r",
													"    return result;\r",
													"}\r",
													"const firstName = \"FFgivenname\"+generateString(3).trim();\r",
													"const lastName =  \"FFln\"+generateString(5).trim();\r",
													"const userName = lastName;\r",
													" let body =  {\r",
													"    \"title\": \"Mr\",\r",
													"    \"givenName\": firstName,\r",
													"    \"middleName\": \"K\",\r",
													"    \"surname\":lastName,\r",
													"    \"suffix\": \"Sr\",\r",
													"    \"dateOfBirth\": \"1990-05-20\",\r",
													"    \"gender\": \"Female\",\r",
													"    \"userName\":userName,\r",
													"    \"emails\": [\r",
													"        {\r",
													"            \"address\": \"ashishsabre@sabre.com\",\r",
													"            \"label\": \"Business\"\r",
													"        }\r",
													"    ],\r",
													"    \"phones\": [\r",
													"        {\r",
													"            \"label\": \"Mobile\",\r",
													"            \"number\": \"5554984\",\r",
													"        }\r",
													"    ],\r",
													"    \"addresses\": [\r",
													"        {\r",
													"            \"addressLine1\": \"apt 101\",\r",
													"            \"addressLine2\": \"spicetree\",\r",
													"            \"city\": \"Dallas\",\r",
													"            \"stateProvinceCode\": \"OH\",\r",
													"            \"postalCode\": \"12345\",\r",
													"            \"countryCode\": \"US\",\r",
													"            \"type\": \"Home\"\r",
													"        }\r",
													"    ],\r",
													"    \"loyaltyPrograms\": [\r",
													"        {\r",
													"            \"airlineCode\": \"B6\",\r",
													"            \"number\": \"*\"\r",
													"        }\r",
													"    ],\r",
													"    \"homeCountryCode\": \"US\",\r",
													"    \"homeAirportCode\": \"LAS\",\r",
													"    \"preferredLanguageCode\": \"EN\",\r",
													"    \"profileType\": \"FrequentFlyer\",\r",
													"    \"password\": \"userName123\",\r",
													"    \"createTravelBankAccount\": false,\r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"pm.variables.set('body', JSON.stringify(body));\r",
													"\r",
													"const newFFUserloginDetails = {\r",
													"     \"userName\": userName,\r",
													"     \"password\": \"userName123\",\r",
													"}\r",
													"\r",
													"postman.setEnvironmentVariable('newFFUserloginDetails', JSON.stringify(newFFUserloginDetails));\r",
													"\r",
													"\r",
													"\r",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
													"const response = pm.response.json();\r",
													"\r",
													"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
													"\r",
													"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
													"    pm.expect(response?.givenName).eqls(requestBody?.givenName);\r",
													"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
													"    pm.expect(response?.surname).eqls(requestBody?.surname);\r",
													"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
													"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
													"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is response has userId\",function(){\r",
													"    pm.expect(response?.userId).exist;\r",
													"});\r",
													"\r",
													" \r",
													"pm.test(\"Validate is the Web Profile loyaltyPrograms response is same as request\",function(){\r",
													" \r",
													"     const loyaltyPrograms = response?.loyaltyPrograms;\r",
													"     console.log(loyaltyPrograms);\r",
													"     for(let i = 0 ;i < loyaltyPrograms.length;i++)\r",
													"     {\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.airlineCode).eqls(requestBody?.loyaltyPrograms[i]?.airlineCode);\r",
													"          pm.expect(response?.loyaltyPrograms[i]?.number).exist;\r",
													"                      \r",
													"     }\r",
													"    \r",
													"});\r",
													"\r",
													"pm.test(\"Validate travelBankDetails are not present as it is only Web Profile\",function(){\r",
													"     pm.expect(response?.travelBankDetails).not.exist;} );\r",
													"\r",
													"const loginDetails = JSON.parse(pm.environment.get(\"newFFUserloginDetails\"));\r",
													"const webProfileLinkRequestId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
													"\r",
													"const LINKBTRQJSON = {\r",
													"    \"userName\": loginDetails?.userName,\r",
													"    \"profileType\": \"FrequentFlyer\",\r",
													"    \"travelBankMarketCode\": \"US\"\r",
													"}\r",
													"\r",
													"\r",
													"let userLoginbody={\r",
													"    \"userId\":loginDetails.userName,\r",
													"    \"password\":loginDetails.password\r",
													"}\r",
													"\r",
													"const postRequestLogin = {\r",
													"  url:  pm.environment.get(\"dcmcLogin\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
													"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(userLoginbody)\r",
													"  }\r",
													"};\r",
													"\r",
													"const webProfileLinkRQ = {\r",
													"  url: pm.environment.get(\"endpoint\")+'/v1/dc/profiles/createTravelBank',\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Request-ID': webProfileLinkRequestId,\r",
													"    'Authorization':'Bearer '+ pm.environment.get(\"token\")\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(LINKBTRQJSON)\r",
													"  }\r",
													"};\r",
													"\r",
													"let BTLINKRESPONSE = {};\r",
													"pm.test(\"Validate the profile linked successfully\", function () {\r",
													"    pm.sendRequest(webProfileLinkRQ, (error, response) => {\r",
													"      console.log(error ? error : response.json());\r",
													"        BTLINKRESPONSE = response.json();\r",
													"      pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
													"      postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
													"      });\r",
													"  \r",
													" });\r",
													" "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Request-ID",
												"value": "{{profileRequestId}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{endpoint}}/v1/dc/profiles/create",
											"host": [
												"{{endpoint}}"
											],
											"path": [
												"v1",
												"dc",
												"profiles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Existing User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function getAll(key) {\r",
											"    let result = [];\r",
											"    key = key.toLowerCase();\r",
											"    pm.response.headers.each((header) => {\r",
											"        if (String(header.key).toLowerCase() === key) {\r",
											"            result.push(header.valueOf());\r",
											"        }\r",
											"    });\r",
											"    return result;\r",
											"}\r",
											"\r",
											"var cookie=getAll(\"Set-Cookie\");\r",
											"postman.setEnvironmentVariable(\"Cookie\",cookie);\r",
											"\r",
											"\r",
											"\r",
											"postman.setEnvironmentVariable(\"loginResponse\",JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
											"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
											"const exisitngloginDetails =  \r",
											"     {\r",
											"         \"userId\": \"TSTS08@JB.COM\",\r",
											"        \"password\": \"TSTS32@JB.COM\"\r",
											"     }\r",
											"\r",
											"postman.setEnvironmentVariable('exisitngloginDetails', JSON.stringify(exisitngloginDetails));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
										"type": "default"
									},
									{
										"key": "X-Request-ID",
										"value": "{{profileReadRequestId}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{exisitngloginDetails}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://dcrouter45.as.dev.ascint.sabrecirrus.com/e45/dc/profile/login?jipcc=B6DX",
									"protocol": "http",
									"host": [
										"dcrouter45",
										"as",
										"dev",
										"ascint",
										"sabrecirrus",
										"com"
									],
									"path": [
										"e45",
										"dc",
										"profile",
										"login"
									],
									"query": [
										{
											"key": "jipcc",
											"value": "B6DX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function getAll(key) {\r",
											"    let result = [];\r",
											"    key = key.toLowerCase();\r",
											"    pm.response.headers.each((header) => {\r",
											"        if (String(header.key).toLowerCase() === key) {\r",
											"            result.push(header.valueOf());\r",
											"        }\r",
											"    });\r",
											"    return result;\r",
											"}\r",
											"\r",
											"var cookie=getAll(\"Set-Cookie\");\r",
											"postman.setEnvironmentVariable(\"Cookie\",cookie);\r",
											"\r",
											"\r",
											"postman.setEnvironmentVariable(\"loginResponse\",JSON.stringify(pm.response.json()));\r",
											"const headersToken = pm.response.headers.filter(h => h.key==\"Set-Cookie\");\r",
											"console.log(\"response_Header\",headersToken);\r",
											"for(let i = 0;i<headersToken.length;i++)\r",
											"{\r",
											"    if(headersToken[i]?.value.includes(\"b6dcsso=\"))\r",
											"    {\r",
											"        let headerlist = headersToken[i]?.value.split(\" \");\r",
											"        let b6dcsso = headerlist[0].split(\"b6dcsso=\");\r",
											"        console.log(\"response_Header\",b6dcsso[1]);}\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const profileReadRequestId = \"profileReadRequestId\"+Math.floor((Math.random()*100 +1));\r",
											"pm.globals.set(\"profileReadRequestId\", profileReadRequestId);\r",
											"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
											"\r",
											"let body={\r",
											"    \"userId\":loginDetails.userName,\r",
											"    \"password\":loginDetails.password\r",
											"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"postman.setEnvironmentVariable('loginDetails', JSON.stringify(loginDetails));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ=",
										"type": "default"
									},
									{
										"key": "X-Request-ID",
										"value": "{{profileReadRequestId}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://dcrouter45.as.dev.ascint.sabrecirrus.com/e45/dc/profile/login?jipcc=B6DX",
									"protocol": "http",
									"host": [
										"dcrouter45",
										"as",
										"dev",
										"ascint",
										"sabrecirrus",
										"com"
									],
									"path": [
										"e45",
										"dc",
										"profile",
										"login"
									],
									"query": [
										{
											"key": "jipcc",
											"value": "B6DX"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Profile",
					"item": [
						{
							"name": "Get Exisitng Profile: with_UserId_Pass",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body = {\r",
											"    \"airlineCode\": \"B6\",\r",
											"    \"clientCode\": \"AS\",\r",
											"    \"clientContextCode\": \"SSW\",\r",
											"    \"profileTypeCode\": \"TVL\",\r",
											"    \"userName\": \"TSTS08@JB.COM\",\r",
											"    \"password\": \"TSTS32@JB.COM\"\r",
											"};\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const loginesponse = JSON.parse(pm.environment.get(\"loginResponse\"));\r",
											" \r",
											"\r",
											"pm.test(\"Validate is the DCP Profile retrived successfully\", function () {\r",
											"    const personalDetails = loginesponse?.result?.user?.personalDetails;\r",
											"    pm.expect(response?.userName).eql(requestBody.userName);\r",
											"    pm.expect(response?.firstName).eql(personalDetails?.firstName);\r",
											"    pm.expect(response?.lastName).eql(personalDetails?.lastName);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "x-sabre-security-token",
										"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
									"host": [
										"{{endpoint}}{{contextpath}}{{Retrieve}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Exisiting Profile : with_ssoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response =  pm.response.json();\r",
											"const loginesponse = JSON.parse(pm.environment.get(\"loginResponse\"));\r",
											"const loginDetails = JSON.parse(pm.environment.get(\"loginDetails\"));\r",
											"\r",
											"pm.test(\"Validate is the DCP Profile loaded successfully\", function () {\r",
											"    const personalDetails = loginesponse?.result?.user?.personalDetails;\r",
											"    pm.expect(response?.userName).eql(loginDetails?.userId);\r",
											"    pm.expect(response?.firstName).eql(personalDetails?.firstName);\r",
											"    pm.expect(response?.lastName).eql(personalDetails?.lastName);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const body ={\r",
											"    \"singleSignOnToken\": \"T1RLAQEKXEhRkfeexJM0Lnzxj0o2vgRM0hCc5MldxhWxyA9JaRMOEvxgAACQjQw4sOLHIAgjUOk562I+CIPlSF8cWrRsK4AyRJ9e9w9Y0IctT2GxMGusRN7MRBmKLxw9X0b9EMfnw7gVJH2o/OzNASMEPUlihoDEiwzK7Ohz1pNA798Rzo+B/dHHSqB3pSEGbH8GHJEGJnZwAMRgx2/yDflPDTqfTf+ZvrQZQRh4voBOLuXbkZhzrjgqYo58\",\r",
											"    \"airlineCode\": \"B6\",\r",
											"    \"clientCode\": \"AS\",\r",
											"    \"clientContextCode\": \"SSW\",\r",
											"    \"profileTypeCode\": \"TVL\"\r",
											"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "x-sabre-security-token",
										"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}"
								},
								"url": {
									"raw": "{{endpoint}}{{contextpath}}{{Retrieve}}",
									"host": [
										"{{endpoint}}{{contextpath}}{{Retrieve}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Error scenario",
					"item": [
						{
							"name": "Validate Web Profile Already Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS ={\r",
											"    \"status\": 500,\r",
											"    \"errorMessage\": \"Error executing PPP profile create webservice. \"\r",
											"}\r",
											"  \r",
											"\r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"  \r",
											"pm.test(\"Verify duplicate Profile with Login ID errors\", function() {\r",
											"    const errors = response?.errors;\r",
											"    pm.expect(errors.some(a => a.category === 'APPLICATION_ERROR') , 'Not a APPLICATION_ERROR').to.be.true;\r",
											"    pm.expect(errors.some(a => a.type === 'DOWNLINE_SERVICE_ERROR') , 'Not a DOWNLINE_SERVICE_ERROR').to.be.true;\r",
											"    var expectedMesssagePresent = false;\r",
											"    for(var i = 0; i < errors.length ;i++)\r",
											"    {\r",
											"        if(errors[i].description.includes(\"Profile with Login ID \"+requestBody?.userName+\" already exists\"))\r",
											"        {\r",
											"          expectedMesssagePresent = true;\r",
											"        }\r",
											"    }\r",
											"   pm.expect(expectedMesssagePresent).eql(true);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											" \r",
											"let body = {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName123\",\"middleName\":\"MilLYlK\",\"lastName\":\"WebUserlastNameOffirstName123\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName277\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName277TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName277TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Web Profile Duplicate UserName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS = {\r",
											"    \"status\": 500,\r",
											"    \"errorMessage\": \"Error executing PPP profile create webservice. \",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"C:::Duplicate Profiles Found\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											" \r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =   {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName517\",\"middleName\":\"MilLYllK\",\"lastName\":\"WebUserlastNameOffirstName518\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName137\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName516TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName516TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Duplicate Web Profile Link BT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const expectedErrorsRS = {\r",
											"     \"status\": 500,\r",
											"    \"errorMessage\": \"Error occurred while creating the travel bank account.\",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Username already exists\"\r",
											"        },\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Duplicate Account\"\r",
											"        },\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Username already exists\"\r",
											"        },\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Duplicate Account\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											" \r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorsRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorsRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorsRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorsRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											" \r",
											"let body =   \r",
											"     {\"userName\":\"WebUserlastNameOffirstName977\",       \r",
											"      \"clientCode\": \"AS\",\r",
											"      \"clientContextCode\": \"SSW\",\r",
											"      \"profileTypeCode\": \"TVL\",\r",
											"      \"travelBankMarketCode\": \"US\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "{{profileRequestId}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/createTravelBank",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"createTravelBank"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Empty  X-Request-ID header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS = {\r",
											"    \"status\": 500,\r",
											"    \"errorMessage\": \"Invocation failed.\",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Missing <eb:ConversationId> in <eb:MessageHeader>!\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =   {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName517\",\"middleName\":\"MilLYllK\",\"lastName\":\"WebUserlastNameOffirstName518\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName137\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName516TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName516TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Missing X-Request-ID header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS =\r",
											"{\r",
											"    \"status\": 400,\r",
											"    \"errorMessage\": \"Request validation.\",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"REQUIRED_HEADER_MISSING\",\r",
											"            \"type\": \"BAD_REQUEST\",\r",
											"            \"description\": \"Required request header 'X-Request-ID' for method parameter type String is not present\",\r",
											"            \"fieldName\": \"X-Request-ID\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =   {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName517\",\"middleName\":\"MilLYllK\",\"lastName\":\"WebUserlastNameOffirstName518\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName137\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName516TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName516TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "****",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate empty Authorization header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS =\r",
											" {\r",
											"    \"status\": 500,\r",
											"    \"errorMessage\": \"Request validation.\",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"BAD_REQUEST\",\r",
											"            \"type\": \"INVALID_VALUE\",\r",
											"            \"description\": \"Required header 'Authorization' is missing.\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											" \r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =   {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName517\",\"middleName\":\"MilLYllK\",\"lastName\":\"WebUserlastNameOffirstName518\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName137\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName516TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName516TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "123456",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "ATK token validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
											"const response = pm.response.json();\r",
											"const expectedErrorRS = {\r",
											"    \"status\": 500,\r",
											"    \"errorMessage\": \"ATK token validation.\",\r",
											"    \"errors\": [\r",
											"        {\r",
											"            \"category\": \"APPLICATION_ERROR\",\r",
											"            \"type\": \"DOWNLINE_SERVICE_ERROR\",\r",
											"            \"description\": \"Invalid token\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											" \r",
											"pm.test(\"Validate response->status has 500\",function(){\r",
											"  pm.expect(response.status).eql(expectedErrorRS?.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate expected errorMessage is \"+ expectedErrorRS?.errorMessage,function(){\r",
											"  pm.expect(response?.errorMessage).eqls(expectedErrorRS?.errorMessage)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response has expected errors\", function() {\r",
											"    const errors = response?.errors; \r",
											"   pm.expect(errors).eql(expectedErrorRS?.errors);\r",
											"});\r",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
											"const lastName = \"WebUserlastNameOf\"+firstName;\r",
											"const userName = lastName;\r",
											"let body =   {\"clientCode\":\"AS\",\"clientContextCode\":\"SSW\",\"profileTypeCode\":\"TVL\",\"firstName\":\"firstName517\",\"middleName\":\"MilLYllK\",\"lastName\":\"WebUserlastNameOffirstName518\",\"prefix\":\"Mr\",\"suffix\":\"Sr\",\"dateOfBirth\":\"1953-05-04\",\"gender\":\"Female\",\"userName\":\"WebUserlastNameOffirstName137\",\"password\":\"0clAD\",\"emailAddresses\":[{\"address\":\"WebUserlastNameOffirstName516TestUserGrpc1@sabre.com\",\"label\":\"WORK\"},{\"address\":\"WebUserlastNameOffirstName516TestUserGrpcw@sabre.com\",\"label\":\"WORK\"}],\"phones\":[{\"label\":\"MOBILE\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"number\":\"\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"postalCode\":\"12345\",\"city\":\"Dayton\",\"stateProvinceCode\":\"OH\",\"countryCode\":\"US\",\"locationTypeName\":\"INVOICE\",\"addressUsageTypeName\":\"HOME\"}],\"travelDocuments\":[{\"issuingCountryCode\":\"US\",\"birthCountryCode\":\"GB\",\"issuingDate\":\"2002-09-11\",\"documentNumber\":\"Q02BN5ZR\",\"documentType\":\"NTID\",\"nationality\":\"GB\",\"expirationDate\":\"2024-05-25\",\"dateOfBirth\":\"1984-10-25\"}],\"frequentFlyerPrograms\":[{\"airlineCode\":\"AM\",\"membershipId\":\"731981844\"}],\"consents\":[{\"typeCode\":\"MKT\",\"value\":\"N\",\"campaignTypeCode\":\"NS\"}],\"hobbies\":{\"categoryCode\":\"SPT\",\"typeCode\":\"ATL\"},\"maritalStatus\":\"SINGLE\",\"corporateUser\":false,\"travelPreference\":{\"seatPreference\":\"NSSA\",\"mealPreference\":\"RVML\",\"specialRequests\":[]},\"securityQuestions\":[{\"code\":\"004\",\"answerHash\":\"securityAnswer\"}],\"profileType\":\"WEB\",\"preferredLanguageCode\":\"it\",\"creditCardsTypes\":[{\"@type\":\"CREDIT_CARD\",\"number\":\"4246919591994198\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2025-01\",\"code\":\"AX\"},{\"type\":\"CREDIT_CARD\",\"number\":\"4246919591994199\",\"nameOnCard\":\"jsonuser\",\"expirationDate\":\"2023-03\",\"code\":\"AX\"}],\"travelBankMarketCode\":\"US\",\"occupation\":{\"industryCode\":\"AGY\",\"company\":\"Sabre\"},\"homeCountryCode\":\"GB\",\"homeAirportCode\":\"DFW\"}\r",
											"\r",
											"pm.variables.set('body', JSON.stringify(body));\r",
											" \r",
											"\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "*****",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Request-ID",
										"value": "123456",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v1/dc/profiles/create",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v1",
										"dc",
										"profiles",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "B6 : CERT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();",
									"var tokenValue = jsonResponse?.access_token;",
									"postman.setEnvironmentVariable(\"token\", tokenValue);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic VmpFNk9Ea3pNVEV4T2tJMk9rSTI6VTFOWFJFTXdNUT09",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=client_credentials"
						},
						"url": {
							"raw": "https://api-crt.cert.havail.sabre.com/v2/auth/token",
							"protocol": "https",
							"host": [
								"api-crt",
								"cert",
								"havail",
								"sabre",
								"com"
							],
							"path": [
								"v2",
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compare DCP VS DCMC",
			"item": [
				{
					"name": "Get Exisitng User : with_UserId_Pass DCP VS DCMC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let body = {\r",
									"    \"airlineCode\": \"B6\",\r",
									"    \"clientCode\": \"AS\",\r",
									"    \"clientContextCode\": \"SSW\",\r",
									"    \"profileTypeCode\": \"TVL\",\r",
									"    \"userId\": \"TSTS08@JB.COM\",\r",
									"    \"password\": \"TSTS32@JB.COM\"\r",
									"}\r",
									"pm.variables.set('body', JSON.stringify(body));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{X-Request-ID}}",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{body}}"
						},
						"url": {
							"raw": "{{endpoint}}/v1/dc/profiles/read",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"v1",
								"dc",
								"profiles",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get : with_UserId_Pass Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{X-Request-ID}}",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTC!ICESMSLB\\/CRT.LB!1678224917129!558!517!1!E2E-1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"airlineCode\": \"B6\",\r\n    \"clientCode\": \"AS\",\r\n    \"clientContextCode\": \"SSW\",\r\n    \"profileTypeCode\": \"TVL\",\r\n    \"userId\": \"TSTS08@JB.COM\",\r\n    \"password\": \"TSTS32@JB.COM\"\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/v1/dc/profiles/read",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"v1",
								"dc",
								"profiles",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "DCMC_Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "x-sabre-security-token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"userId\": \"TSTS08@JB.COM\",\r\n    \"password\": \"TSTS32@JB.COM\"\r\n}"
						},
						"url": {
							"raw": "http://dcmc8-lg.as.dev.ascint.sabrecirrus.com/api/profile/login?jipcc=B6DX",
							"protocol": "http",
							"host": [
								"dcmc8-lg",
								"as",
								"dev",
								"ascint",
								"sabrecirrus",
								"com"
							],
							"path": [
								"api",
								"profile",
								"login"
							],
							"query": [
								{
									"key": "",
									"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTD!ICESMSLB\\/CRT.LB!1674772133692!2368!517",
									"disabled": true
								},
								{
									"key": "jipcc",
									"value": "B6DX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DCMC_GetProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const DCMCProfileReadResponse = pm.response.json();\r",
									"console.log(\"response\",DCMCProfileReadResponse);\r",
									"postman.setEnvironmentVariable(\"DCMCProfileReadResponse\", JSON.stringify(DCMCProfileReadResponse));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "LhjlygODWODAADQGeiZ9I9uWja/Fp6qYCaaCYXYYCmRrhc7uOkR0vHOW26Qi4TsDapwAPQc3LYuCb05KbFC6dPdu2DOl5lcF7igeEcqIe7PwSG0bodm9IOSKZlq6yGqjLH/ywRrqoUBEjyn3YgfmySsb+Gkod+pEQxwJBu/61g7ECp+BfiOlTPdOcMcdYMUMKMffMUgqwaaTEyhqq61E1M2b/GtrJifAK0daydjL1Rk2HPuZiJl9pEwPK8WkluYwqBiqd4XxvVPCkIuEzqo0BMbmzCzyXuRtUjVFg**",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-sabre-airline",
								"value": "VA",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-sabre-conversation-id",
								"value": "test1234",
								"type": "text"
							},
							{
								"key": "x-sabre-security-token",
								"value": "Shared/IDL:IceSess\\/SessMgr:1\\.0.IDL/Common/!ICESMS\\/ACPCRTD!ICESMSLB\\/CRT.LB!1681496005875!5629!533!1!E2E-1",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer T1RLAQEJY6t5atq1gysA7dO%2BcIDD0kkqnxDvrSdIBnXzFrwJMAcqDPVcAACQKEqt%2BDmHl5rdC%2FLT2fn0GkxS4kUCDFEJYe3FsziwBSp66UZu51H24HcW14fUZ5HR9LXEpbr2hUAWzm1WQoZASd7NNkj5JrrkFnOs9vvHk5pkokZRKpWr2w4jO0NWScqMh4YDhgUFG%2BPxfLREh0%2BSWDKCU63QTBd8rp9TZl0Hak0WcF3GS0FjykmK0cSNATbJ",
								"type": "text",
								"disabled": true
							},
							{
								"key": "cookie",
								"value": "b6dcsso=T1RLAQF81rjppyIOBgjxKs05BLwZ29TK+BDXE+Y9a1ZZ8QBDnGY0xKYtAACQQS5TZy/Ap6zQcnJR3pnzG939AgD+kl9rxB47Fg3fBYvl+0e99isIRxzoI1GQ42GwIJChVNbAbVopV+pckZAr1Tm2OpZMuXnOxNVglmxkm7EJEjMRuo3L4auOSSzo/6bjkO/v1UDGb0hKPvtHVjdoaIFHz21H4McEonQWEjvJ3LXRXn2HQTy9jMI3DO9stTvr; Max-Age=14400; Expires=Sat, 15-Apr-2023 01:02:46 GMT; Path=/; Secure",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://dcmc8-lg.as.dev.ascint.sabrecirrus.com/api/profile?jipcc=B6DX",
							"protocol": "http",
							"host": [
								"dcmc8-lg",
								"as",
								"dev",
								"ascint",
								"sabrecirrus",
								"com"
							],
							"path": [
								"api",
								"profile"
							],
							"query": [
								{
									"key": "jipcc",
									"value": "B6DX"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Local host",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const profileRequestId = \"profileRequestId\"+Math.floor((Math.random()*997 +1));\r",
							"pm.globals.set(\"profileRequestId\", profileRequestId);\r",
							"const givenName = \"firstName\"+Math.floor((Math.random()*1000+1));\r",
							"const surname = \"WebUserlastNameOf\"+givenName;\r",
							"const userName =  surname;\r",
							"let body =  {\"title\":\"Mr\",\"givenName\": givenName,\"middleName\":\"K\",\"surname\":surname,\"suffix\":\"Sr\",\"dateOfBirth\":\"1990-05-20\",\"gender\":\"Female\",\"userName\":userName,\"emails\":[{\"address\":\"ashishsabre@sabre.com\",\"label\":\"Business\"}],\"phones\":[{\"label\":\"Mobile\",\"countryCallingCode\":\"534\",\"areaCode\":\"267\",\"localNumber\":\"5554984\",\"extension\":\"123\"}],\"addresses\":[{\"addressLine1\":\"apt 101\",\"addressLine2\":\"spicetree\",\"cityCode\":\"DFW\",\"stateProvinceCode\":\"OH\",\"postalCode\":\"12345\",\"countryCode\":\"US\",\"type\":\"Home\"}],\"loyaltyPrograms\":[{\"airlineCode\":\"X0\",\"number\":\"987654321\",\"tierLevel\":\"GLD\",\"tierNumber\":3,\"receiverAirlineCode\":\"X0\",\"accountBalance\":2500,\"numberOfCertificates\":0}],\"homeCountryCode\":\"US\",\"homeAirportCode\":\"LAS\",\"preferredLanguageCode\":\"EN\",\"profileType\":\"Web\",\"password\":userName,\"createTravelBankAccount\":false,\"travelBankMarketCode\":\"AU\"}\r",
							"pm.variables.set('body', JSON.stringify(body));\r",
							"\r",
							"const newUserloginDetails = {\r",
							"     \"userId\": userName,\r",
							"    \"password\": \"0clAD\",\r",
							"}\r",
							"\r",
							"postman.setEnvironmentVariable('newUserloginDetails', JSON.stringify(newUserloginDetails));\r",
							"\r",
							"\r",
							"\r",
							" \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const requestBody = JSON.parse(pm.variables.get(\"body\"));\r",
							"const response = pm.response.json();\r",
							"\r",
							"postman.setEnvironmentVariable('WebProfileResponseData', JSON.stringify(response));\r",
							"postman.setEnvironmentVariable('WebProfileLinkBTWithUserNameRS', JSON.stringify(response));\r",
							"\r",
							"\r",
							"pm.test(\"Validate is the Web Profile User created successfully with Requested parameter\",function(){\r",
							"    pm.expect(response?.firstName).eqls(requestBody?.firstName);\r",
							"    pm.expect(response?.middleName).eqls(requestBody?.middleName);\r",
							"    pm.expect(response?.lastName).eqls(requestBody?.lastName);\r",
							"    pm.expect(response?.dateOfBirth).eqls(requestBody?.dateOfBirth);\r",
							"    pm.expect(response?.gender).eqls(requestBody?.gender);\r",
							"    pm.expect(response?.userName).eqls(requestBody?.userName);\r",
							"});\r",
							"\r",
							" \r",
							"pm.test(\"Validate is response has userId\",function(){\r",
							"    pm.expect(response?.userId).exist;\r",
							"});\r",
							"\r",
							" \r",
							"pm.test(\"Validate is the Web Profile FrequentFlyer response is same as request\",function(){\r",
							" \r",
							"     const frequentFlyers = response?.frequentFlyerPrograms;\r",
							"     console.log(frequentFlyers);\r",
							"     for(let i = 0 ;i < frequentFlyers.length;i++)\r",
							"     {\r",
							"          pm.expect(response?.frequentFlyers[i]?.membershipId).eqls(requestBody?.frequentFlyers[i]?.membershipId);\r",
							"          pm.expect(response?.frequentFlyers[i]?.airline).eqls(requestBody?.frequentFlyers[i]?.airline);\r",
							"\r",
							"          pm.expect(response?.frequentFlyers[i]?.membershipLevelValue).exist;\r",
							"          pm.expect(response?.frequentFlyers[i]?.accountBalance).exist;\r",
							"          pm.expect(response?.frequentFlyers[i]?.loyaltyTierLevel).exist;\r",
							"          pm.expect(response?.frequentFlyers[i]?.membershipId).exist;\r",
							"          pm.expect(response?.frequentFlyers[i]?.airline).exist;        \r",
							"     }\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validate is the Web Profile travelDocuments response is same as request\",function(){\r",
							" \r",
							"     const travelDocuments = response?.travelDocuments;\r",
							"     console.log(travelDocuments);\r",
							"\r",
							"     for(let i = 0 ;i < travelDocuments.length;i++)\r",
							"     {       \r",
							"          let filtertheTBDocument = travelDocuments.filter(tb=>tb.documentNumber===requestBody?.travelDocuments[i]?.documentNumber);\r",
							"          console.log('from if filtertheTBDocument',filtertheTBDocument)\r",
							"          if(filtertheTBDocument)\r",
							"          {\r",
							"          pm.expect(filtertheTBDocument[0]?.documentNumber).eqls(requestBody?.travelDocuments[i]?.documentNumber);\r",
							"          pm.expect(filtertheTBDocument[0]?.documentType).eqls(requestBody?.travelDocuments[i]?.documentType);\r",
							"          }\r",
							"      }});\r",
							"\r",
							"pm.test(\"Validate is the Web Profile userCreditCards response is same as request\",function(){\r",
							"    const userCreditCards = response?.creditCards;\r",
							"     const reqUserCreditCards = requestBody?.userCreditCardsTypes;\r",
							"\r",
							"    for(let i=0; i<reqUserCreditCards.length;i++){\r",
							"       let cardtype= reqUserCreditCards[i];\r",
							"        pm.expect(userCreditCards[i]?.type).eqls(cardtype['@type']);\r",
							"        pm.expect(userCreditCards[i]?.nameOnCard).eqls(reqUserCreditCards[i]?.nameOnCard);\r",
							"        pm.expect(userCreditCards[i]?.expirationDate).eqls(reqUserCreditCards[i]?.expirationDate);\r",
							"        pm.expect(userCreditCards[i]?.cardCode).eqls(reqUserCreditCards[i]?.cardCode);\r",
							"} }  );\r",
							"\r",
							"\r",
							"const loginDetails = JSON.parse(pm.environment.get(\"newUserloginDetails\"));\r",
							"const webProfileLinkRequestId = \"WebprofileBTLink\"+Math.floor((Math.random()*100 +1));\r",
							"\r",
							"const LINKBTRQJSON = {\r",
							"    \"userName\": loginDetails?.userId,\r",
							"    \"clientCode\": \"AS\",\r",
							"    \"clientContextCode\": \"SSW\",\r",
							"    \"profileTypeCode\": \"TVL\",\r",
							"    \"travelBankMarketCode\": \"US\"\r",
							"}\r",
							"\r",
							"const webProfileLinkRQ = {\r",
							"  url: pm.environment.get(\"endpoint\")+'/v1/dc/profiles/createTravelBank',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"    'Content-Type': 'application/json',\r",
							"    'X-Request-ID': webProfileLinkRequestId,\r",
							"    'Authorization':'Bearer '+ pm.environment.get(\"token\")\r",
							"  },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify(LINKBTRQJSON)\r",
							"  }\r",
							"};\r",
							"\r",
							"let BTLINKRESPONSE = {};\r",
							"pm.test(\"Validate the profile linked successfully\", function () {\r",
							"    pm.sendRequest(webProfileLinkRQ, (error, response) => {\r",
							"      console.log(error ? error : response.json());\r",
							"        BTLINKRESPONSE = response.json();\r",
							"      pm.expect(BTLINKRESPONSE?.accountNumber).exist;\r",
							"      postman.setEnvironmentVariable('LinkBTWithUserIDRS', JSON.stringify(BTLINKRESPONSE));\r",
							"      });\r",
							" });\r",
							" \r",
							"const postRequestLogin = {\r",
							"  url:  pm.environment.get(\"dcmcLogin\"),\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"    'Content-Type': 'application/json',\r",
							"    'X-Request-ID': \"WebprofileBTLINKandReadProfile1\",\r",
							"    'Authorization': 'Basic anNvbl91c2VyOmpzb25fcGFzc3dvcmQ='\r",
							"  },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify(loginDetails)\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.test(\"Validate the BT accountNumber created and liked successfully\",function(){\r",
							"pm.sendRequest(postRequestLogin, (error, response) => {\r",
							"  console.log(error ? error : response.json());\r",
							"  loginRespose = response.json();\r",
							"  pm.expect(loginRespose?.result?.user?.travelBankDetails?.accountNumber).eqls(BTLINKRESPONSE?.accountNumber);\r",
							"});\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Request-ID",
						"value": "{{profileRequestId}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/dc/profiles/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"dc",
						"profiles",
						"create"
					]
				}
			},
			"response": []
		}
	]
}
